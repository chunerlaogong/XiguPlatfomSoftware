/*
********************************************************************************
*
*                                 BSP_IIC.c
*
* File          : BSP_IIC.c
* Version       : V1.0
* Author        : Lhl
* Mode          : Thumb2
* Toolchain     : 
* Description   : IIC驱动程序（GPIO模拟IIC）
*                
* History       :
* Date          : 2018.05.08
*******************************************************************************/
#include "BSP_GPIO_I2C.h"
#include "stm8l15x_i2c.h"
#include "stm8l15x_gpio.h"
#include "APP.h"
#include "BSP_GPIO.h"

/*******************************************************************************
* Function Name :BSP_IICInit(void)
* Description   :模拟IIC初始化
* Output        :
* Other         :
* Date          :2018.05.08
*******************************************************************************/
void BSP_I2cInit(GPIO_I2C_TypeDef gpio_i2c_structer)
{
      I2C_INIT(gpio_i2c_structer.GPIO_SCL_BASE, gpio_i2c_structer.GPIO_SCL_PIN, gpio_i2c_structer.GPIO_SDA_BASE ,gpio_i2c_structer.GPIO_SDA_PIN);		//I2C初始化
      I2C_SCL_SET(gpio_i2c_structer.GPIO_SCL_BASE, gpio_i2c_structer.GPIO_SCL_PIN);
      I2C_SDA_SET(gpio_i2c_structer.GPIO_SDA_BASE, gpio_i2c_structer.GPIO_SDA_PIN);		
}  

/*******************************************************************************
* Function Name : void IIcNop(void)
* Description   : IIC延时
* Input         : 
* Output        : 
* Other         : 
* Date          : 2018.05.11
*******************************************************************************/
void BSP_I2cNop(void)
{
	nop();nop();nop();nop();nop();
	nop();nop();nop();nop();nop();
	nop();nop();nop();nop();nop();
	nop();nop();nop();nop();nop();

}

/*******************************************************************************
* Function Name : void IIcStart(uint8_t Channel)
* Description   : IIC开始信号
* Input         : Channel:通道 
* Output        : 
* Other         : 
* Date          : 2018.05.11
*******************************************************************************/
void BSP_I2cStart(GPIO_I2C_TypeDef gpio_i2c_structer)
{

		I2C_IIC_INIT();
		I2C_SDA_SET();
		I2C_SCL_SET(gpio_i2c_structer.GPIO_SCL_BASE, gpio_i2c_structer.GPIO_SCL_PIN);
		IIcNop();
		I2C_SDA_CLR();
		IIcNop();
		I2C_SCL_CLR();
}

/*******************************************************************************
* Function Name : void BSP_I2cStop(GPIO_I2C_TypeDef gpio_i2c_structer)
* Description   : IIC停止信号
* Input         : Channel:通道 
* Output        : 
* Other         : 
* Date          : 2018.05.11
*******************************************************************************/
void BSP_I2cStop(GPIO_I2C_TypeDef gpio_i2c_structer)
{
            I2C_SDA_CLR();
            IIcNop();
            I2C_SCL_CLR();
            I2C_SCL_SET(gpio_i2c_structer.GPIO_SCL_BASE, gpio_i2c_structer.GPIO_SCL_PIN);
            IIcNop();
            I2C_SDA_SET(); 
}

/*******************************************************************************
* Function Name : uint8_t BSP_I2c8BitRead(uint8_t m_uACK, GPIO_I2C_TypeDef gpio_i2c_structer)
* Description   : IIC读出1字节数据
* Input         : Address:地址 Channel:通道 
* Output        : 
* Other         : 
* Date          : 2018.05.11
*******************************************************************************/
uint8_t BSP_I2c8BitRead(uint8_t m_uACK, GPIO_I2C_TypeDef gpio_i2c_structer)
{
	uint8_t i=0;
	uint8_t Temp=0;
		for(i=0;i<8;i++)
		{	                         
			I2C_SCL_SET(gpio_i2c_structer.GPIO_SCL_BASE, gpio_i2c_structer.GPIO_PIN_SCL);
			Temp=Temp<<1;
			IIcNop();
			if(I2C_SDA_READ())
                        {
				Temp++;
                        }
			I2C_SCL_CLR();
			IIcNop();
		}
		if(m_uACK)   //如果有ACK
                {
			I2C_SDA_CLR();//输出
                }
		else
                {
			I2C_SDA_SET();//输出
                }
                IIcNop();
                I2C_SCL_SET(gpio_i2c_structer.GPIO_SCL_BASE, gpio_i2c_structer.GPIO_SCL_PIN);//输出
                IIcNop();
                I2C_SCL_CLR();//输出
                IIcNop(); 
                I2C_SDA_SET();
                IIcNop(); 
   
   return Temp;
}
/*******************************************************************************
* Function Name : uint8_t BSP_I2c8BitWrite(uint8_t data , GPIO_I2C_TypeDef gpio_i2c_structer)
* Description   : IIC写入1字节数据
* Input         : data: 需要写入的数据          Channel:通道 
* Output        : 
* Other         : 
* Date          : 2018.05.11
*******************************************************************************/
uint8_t BSP_I2c8BitWrite(uint8_t data , GPIO_I2C_TypeDef gpio_i2c_structer)
{
  uint8_t i=0;
    for(i=0;i<8;i++)
    {
        if(data & 0x80)//取最高位
        {
            I2C_SDA_SET();
        }
        else
        {
            I2C_SDA_CLR();
        }
        data=data<<1;
        I2C_SCL_SET(gpio_i2c_structer.GPIO_SCL_BASE, gpio_i2c_structer.GPIO_SCL_PIN);
        IIcNop();
        I2C_SCL_CLR();
    }
    I2C_SDA_SET();
    IIcNop();
    I2C_SCL_SET(gpio_i2c_structer.GPIO_SCL_BASE, gpio_i2c_structer.GPIO_SCL_PIN);
    IIcNop();
    I2C_SCL_CLR();
    IIcNop();
    return I2C_SDA_READ();//读应答位（应答为低，非应答为高）
 
  return 0;
}
/*******************************************************************************
* Function Name : BSP_I2cWrite(uint8_t Address , uint8_t data , GPIO_I2C_TypeDef gpio_i2c_structer)
* Description   : IIC写入数据
* Input         : Address:地址 data: 需要写入的数据             Channel:通道 
* Output        : 
* Other         : 
* Date          : 2018.05.11
*******************************************************************************/
void BSP_I2cWrite(uint8_t Address , uint8_t data , GPIO_I2C_TypeDef gpio_i2c_structer)
{
	IIcStart(Channel);
	IIc8BitWrite(SLAVE_ADDRESS_I2C+ IIC_WRITE );
	IIc8BitWrite(Address );
	IIc8BitWrite(data );
	IIcStop();
}
/*******************************************************************************
* Function Name : uint8_t BSP_I2cRead(uint8_t Address , GPIO_I2C_TypeDef gpio_i2c_structer)
* Description   : IIC读出数据
* Input         : Address:地址 Channel:通道 
* Output        : 
* Other         : 
* Date          : 2018.05.11
*******************************************************************************/
uint8_t BSP_I2cRead(uint8_t Address , GPIO_I2C_TypeDef gpio_i2c_structer)
{
	IIcStart(Channel);
	IIc8BitWrite(SLAVE_ADDRESS_I2C + IIC_WRITE );
	IIc8BitWrite(Address , Channel);
	IIcStart(Channel);
	IIc8BitWrite(SLAVE_ADDRESS_I2C + IIC_READ );
	uint8_t cc = IIc8BitRead(0 );
	IIcStop();
	return cc;
}

/*******************************************************************************
* Function Name : uint8_t BSP_I2cWriteBytes(uint8_t Address , GPIO_I2C_TypeDef gpio_i2c_structer, uint8_t* pData , uint8_t len)
* Description   : IIC写数据
* Input         : 
* Output        : 
* Other         : 
* Date          : 2018.05.11
*******************************************************************************/
uint8_t BSP_I2cWriteBytes(uint8_t Address , GPIO_I2C_TypeDef gpio_i2c_structer, uint8_t* pData , uint8_t len)
{
	uint8_t ACK = 0;
	IIcStart(Channel);
	switch (Channel)
	{
		case 0:ACK = IIc8BitWrite((SLAVE_ADDRESS_I2C+IIC_WRITE));break;//I2C
		case 1:ACK = IIc8BitWrite((LIS2DH12_CHANNEL+IIC_WRITE));break;//LIS2DH12
		case 2:ACK = IIc8BitWrite((LM75AD_CHANNEL+IIC_WRITE));break;//LM75AD
	}
	ACK |= IIc8BitWrite(Address,Channel);
	for(uint8_t i=0; i<len; i++)
	{
		IIc8BitWrite(pData[i] , Channel);
	}
	IIcStop(Channel);
	return ACK;
}

/*******************************************************************************
* Function Name : uint8_t BSP_I2cReadBytes(uint8_t Address, GPIO_I2C_TypeDef gpio_i2c_structer,uint8_t* pData , uint8_t Len)
* Description   : IIC读出数据
* Input         : Address:地址 Channel:通道 pData:返回的数据 Len:长度
* Output        : 
* Other         : 
* Date          : 2018.05.11
*******************************************************************************/
uint8_t BSP_I2cReadBytes(uint8_t Address, GPIO_I2C_TypeDef gpio_i2c_structer, uint8_t* pData , uint8_t Len)
{
	uint8_t ACK=0;
		IIcStart(Channel);     //开始电平
		IIc8BitWrite(SLAVE_ADDRESS_I2C+IIC_WRITE,Channel);
        IIc8BitWrite(Address,Channel);
		IIcStart(Channel);
		IIc8BitWrite(SLAVE_ADDRESS_I2C+IIC_READ,Channel);
		for(uint8_t i=0; i<Len; i++)
		{
			if(i < Len - 1)
			{
				pData[i] = IIc8BitRead(1,Channel);
			}
			else
			{
				pData[i] = IIc8BitRead(0,Channel);
			}
		}
		IIcStop(Channel);
	
	return ACK;
}


