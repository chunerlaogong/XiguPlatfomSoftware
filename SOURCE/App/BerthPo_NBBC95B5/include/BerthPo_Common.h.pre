#ifndef _BERTHPO_COMMON_H_
#define _BERTHPO_COMMON_H_

#include "stm8l15x.h"
#include "Drivers_Common.h"
#include "BerthPo_RM3100.h"
#include "Drivers_LED.h"
#define NB_TX_BUFFER_SIZE    40
#define MAX_(bit1, bit2)  ((bit1) >= (bit2) ? (bit1) : (bit2))// 最大值
#define MIN_(bit1, bit2)  ((bit1) <= (bit2) ? (bit1) : (bit2))// 最小值
#define TYPE_S8(data) (data) > 127 ? 127 : ((data) < -127 ? -127 : (data));//当data>127时，data=127；当-127=<data<=127时，data=data；当data<-127时，data=-127
#define TYPE_U8(data) (data) > 255 ? 255 : ((data) < 0 ? 0 : (data));//当data>255时，data=255；当0=<data<=255时，data=data；当data<0时，data=0 


//flash操作相关变量定义
#define MASS_KEY1   0XAE            //写操作密钥,注意FLASH与EEPROM的密钥相反
#define MASS_KEY2   0X56
#define TAG_PARAM_START_ADDRESS  (0x50)
#define BOOTLOADER_START_ADDRESS  (0x8000)

//枚举车位状态
typedef enum
{
    BERTHPO_PARK_STATE_NULL,    //无车
    BERTHPO_PARK_STATE_HAVE,    //有车
} BERTH_STATE;
//枚举工作模式
typedef enum
{
    BERTHPO_MODE_TEST,         //测试模式
    BERTHPO_MODE_ACTIVE,       //激活正常工作模式
    BERTHPO_MODE_FACTORY       //工厂模式
} BERTHPO_MODE;
typedef struct
{
    unsigned int   UserCode;
    unsigned char  Frame_ctrl;
    unsigned char   FrameLens;
    unsigned char  Pas_mima;
    unsigned char  text[100];
}*PFRAME_DATA_AREA, SFRAME_DATA_AREA;


typedef struct
{
    uint8_t workStatus;
    uint8_t initNB;
    uint16_t userCode;
    uint8_t tagID[3];
    uint8_t updateFlag;
    uint8_t version;
    uint16_t wdtInterval;          //WDT睡眠时间
    uint16_t heartbeatInterval;    //心跳时间
    uint16_t sendPackCount;        //发送数据包间隔
    uint16_t alarmValid;
    uint8_t paraIntFlag[3];        //参数同步标志
    uint8_t LEDFlag;
    uint8_t GetEMBottom_RFFlag;    //地磁开关
    int16_t GetEMBottom_RFModThreshold;
    int16_t GetEMBottom_RFAngleThreshold;
    int16_t EMData_xBottom;
    int16_t EMData_yBottom;
    int16_t EMData_zBottom;
    uint8_t fastRouse;                //快速唤醒标志
    uint8_t fastRouseAlarm;
    uint8_t serverConfig;
    uint8_t defaultCoapIpAddr[4];     //COAP协议IP
    uint8_t defaultCoapPort;          //COAP协议端口
    uint8_t defaultOriginIpAddr[4];   //原始协议IP
    uint8_t defaultOriginPort[4];     //原始协议端口
}*PPARAM_NB_TAG, SPARAM_NB_TAG;

typedef struct
{
    uint8_t paraIntFlag;                            //参数初始化标志
    uint8_t wdtInterval;                            //wdt固定睡眠时间，
    uint8_t fastRouseAlarm;                         //多次快速唤醒报警标志
    uint8_t fastRouse;                              //wdt快速唤醒标志
    uint8_t heartbeatInterval;                      //心跳间隔时间
    uint32_t alarmValid;
    uint32_t alarmStatus;
    uint8_t HMCOutFlag;                             //等待地磁操作退出标志，0--退出，1--继续等待
    uint8_t getEMBottomFlag;                        //取本底成功标志
    uint8_t getEMBottom_RFFlag;                     //地磁工作标志
    int32_t getEMBottom_RFModThreshold;             //磁场强度灵敏度
    int32_t getEMBottom_RFAngleThreshold;           //磁场偏转角度灵敏度
    int16_t EMDataBottom_x;                         //x轴强度本底
    int16_t EMDataBottom_y;                         //y轴强度本底
    int16_t EMDataBottom_z;                         //z轴强度本底
    int32_t EMData_xyz_AbsValue_Module_Bottom;      //xyz轴变化模值本底
    int32_t EMData_RMS;
    int32_t EMData_xRMS;
    int32_t EMData_zRMS;
} *PPARAM_CONFIG, SPARAM_CONFIG;
typedef struct
{
    uint8_t  idNub[3];
    uint32_t userCode;
    uint8_t  intFlag;
    uint8_t  ledFlag;    //led开关标志，取系统灯配置
    uint8_t  mcuSleepFlag;
}*PNODE_CONFIG, SNODE_CONFIG;
typedef struct
{
    uint8_t initSign[3];
    uint8_t workStatus;                 //20170727出厂状态标志，ACTIVATE为激活状态，LEAVE_FACTORY为出厂状态
    uint8_t initNB;
    uint8_t Tag_workMode;               //工作模式
    SNODE_CONFIG   nodeConfig;          //共7字节
    SPARAM_CONFIG  paramConfig;         //共32字节
} *PCONTROL_CONFIG, SCONTROL_CONFIG;

typedef struct
{
    uint8_t currentParkState = 0;    //当前停车状态，用于比较停车状态是否改变
    uint8_t fastGetParkCount =
        0;    //快速获取车辆状态，当这个变量不为零时，为前面车辆刚刚离开，此时快速启动检查防止跟车进车位过快
}*PBERTHPO_PARK_STATUS, SBERTHPO_PARK_STATUS;

typedef struct
{

    LED_GPIO_TypeDef LED_GPIO;              //LED控制管脚定义
    RM3100_GPIO_TypeDef RM3100_GPIO;        //RM3100管脚定义
    BT_I410ES_GPIO_TypeDef BTI410ES_GPIO;   //蓝牙模块管脚定义
    uint32_t batteryCount;             //电池计量周期
    uint32_t sendPackCount;
    uint32_t sendNodeCount;            //是否达到发送心跳包计数
    uint8_t  autoLockCount;            //自动锁s定计数，特殊应用
    uint8_t  sendToServerCount;        //发送计数,用做发送数据包顺序区分，应对因网络堵塞造成延迟导致的数据顺序混乱
    uint8_t  sendDataRandomDelay;      //发送数据随机延时
    uint8_t  debugInfoFlag;            //调试信息标志
    uint8_t  outBottomFlag;            //输出本底标志,0--手动校准本底，1--动态本底
    SSENSOR_RM3100 sensorRm3100;
    SCONTROL_CONFIG  controlConfig;
    SBERTHPO_PARK_STATUS parkStatus;   //泊位宝标签停车状态

    uint8_t txBuffer[NB_TX_BUFFER_SIZE];
} *PCONTROL_SYMPLE, SCONTROL_SYMPLE;

/************************函数声明*********************/
void BerthPo_WriteParamToFlash(SPARAM_NB_TAG paramNBTag, SCONTROL_SYMPLE pSymple);
void BerthPo_ReadParamFromFlash(SPARAM_NB_TAG paramNBTag, SCONTROL_SYMPLE pSymple);
void BerthPo_ProductTestMode(SCONTROL_SYMPLE pSymple);                               
void BerthPo_MakeHead(SCONTROL_SYMPLE pSymple);
void Hex_to_ASCII(char *pHex, char *pASCII, uint8_t len);


#endif   //_BERTHPO_COMMON_H_
